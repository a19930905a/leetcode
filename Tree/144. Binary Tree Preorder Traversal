/**

leetcode : https://leetcode.com/problems/binary-tree-preorder-traversal/


Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]

思路: Pre-order,先走訪 根節點 -> 左子樹 -> 右子樹 ,比較需要思考的是在 Iterative 的答案中,我們在 push value進 stack 時需要先 push 右再來左,因
      為 stack 的先進後出特性

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

Solution 1 : Recursive

class solution{
	public List<Integer> preorderTraversal(TreeNode root){
		List<Integer> res = new ArrayList();
		helper(root , res);
		return res;
	}
	
	public void helper(TreeNode root , List<Integer> res){
		if(root == null)
			return res;
		res.add(root.val);
		helper(root.left , res);
		helper(root.right , res);
	}
}

Solution 2 : Iterative

class solution{
	public List<Integer> preorderTraversal(TreeNode root){
		Stack<TreeNode> stack = new Stack();
		List<Integer> res = new ArrayList();
		if(root == null)
			return res;
		stack.push(root);
		
		while(!stack.isEmpty()){
			TreeNode current = stack.pop();
			res.add(current.val);
			if(current.right != null){
				stack.push(current.right);
			}
			if(current.left != null){
				stack.push(currnet.left);
			}
		}
		return res;
	}	
}
