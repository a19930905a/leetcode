/*

leetcode : https://leetcode.com/problems/binary-tree-level-order-traversal/

Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

思路:這題是要我們跟著樹的 level 走訪並輸出 ,這邊可以利用 Queue 的先進先出特性每次紀錄該 level 有的節點並順便判斷該節點是否下面還有其他的子節點


*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
		List<List<Integer>> res = new LinkedList();
		if(root == null)
			return res;
			
		Queue<TreeNode> queue = new LinkedList();
		queue.offer(root);
		
		while(!queue.isEmpty()){
			int size = queue.size();
			List<Integer> temp = new LinkedList();
			for(int i = 0 ; i<size ; i++){
				TreeNode current = queue.poll();
				if(current.left != null)
					queue.offer(current.left);
				if(current.right != null)
					queue.offer(current.right);
				temp.add(current.val);
			}
			res.add(temp);
		}			
		return res;
	}
}


