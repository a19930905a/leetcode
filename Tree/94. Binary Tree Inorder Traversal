/*

leetcode : https://leetcode.com/problems/binary-tree-inorder-traversal/

Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]

思路:In-order走訪, 左子樹 -> 根節點 -> 右子樹,比較需要思考的部分再使用 Iterative 解法時,我們都必須想辦法走到最左下部分的節點
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

Solution 1 : Recursive

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
  		List<Integer> res = new ArrayList();
		helper( root , res );
		return res;
	}
	public void helper(TreeNode root , List<Integer> res){
		if(root == null)
			return;
		helper(root.left , res);
		res.add(root.val);
		helper(root.right , res);
	}
}

Solution 2 : Iterative

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
		Stack<TreeNode> stack = new Stack();
		List<Integer> res = new ArrayList();
		if(root == null)
			return res;
			
		TreeNode current = root;
		
		while(current != null || !stack.isEmpty()){
			while(current != null){
				stack.push(current);
				current = current.left;
			}
			current = stack.pop();
			res.add(current.val);
			current = current.right;
		}
		return res;
	}
}
