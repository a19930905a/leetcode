/*

		leetcode : https://leetcode.com/problems/pascals-triangle/
		
		Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.


		In Pascal's triangle, each number is the sum of the two numbers directly above it.

		Example:

		Input: 5
		Output:
		[
			 [1],
			[1,1],
		   [1,2,1],
		  [1,3,3,1],
		 [1,4,6,4,1]
		]

思路:這題要我們做出 Pascal's triangle , 這邊的思路是我們可以發現最左邊跟最右邊的值都為1 , 再來的 index 值就是由上一個的 index 和 index+1 所相加,
     所以我們只要每次都記憶上一次的 list,並使用在現在的 current_list 即可
 

*/

class Solution {
    public List<List<Integer>> generate(int numRows) {
		List<List<Integer>> res = new ArrayList();
		List<Integer> current = null;
		List<Integer> pre = null;
		
		for(int i = 0 ; i <numRows ; i++){
			currnet = new ArrayList();
			for(int j = 0 ; j<=i ; j++){
				if(j==0||j==i)					//最左邊跟右邊都必為 1
					current.add(1);
				else
					current.add(pre.get(j-1) + pre.get(j));		//目前的 index 值為上一次的 index 和 index-1 的值相加
			}
			pre = current;			//紀錄上一列的數值
			res.add(current);
		}
		
		return res;
	}
}
